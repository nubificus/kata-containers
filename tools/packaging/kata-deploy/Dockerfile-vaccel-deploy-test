# run this like docker build --build-arg archtag=x86_64 or aarch64 
ARG ARCHTAG

FROM ubuntu:latest as env-x86_64
ARG ARCHTAG
RUN echo ARCH="$ARCHTAG"

ARG KATA_RELEASE=2.1.0-alpha2
ARG KATA_ARTIFACTS_URL=https://github.com/kata-containers/kata-containers/releases/download/${KATA_RELEASE}/kata-static-${KATA_RELEASE}-x86_64.tar.xz
ARG KATA_ARTIFACTS=kata-static-${KATA_RELEASE}-x86_64.tar.xz

#ARG KATA_VACCEL_ARTIFACTS_URL=
#ARG KATA_VACCEL_ARTIFACTS=<tar name>

FROM ubuntu:latest as env-aarch64
ARG ARCHTAG
RUN echo ARCH="$ARCHTAG"

#ARG KATA_VACCEL_ARTIFACTS_URL=
#ARG KATA_VACCEL_ARTIFACTS=<tar name>

FROM env-${ARCHTAG} as artifacts
ARG ARCHTAG
ARG KATA_RELEASE
ARG KATA_ARTIFACTS_URL
ARG KATA_ARTIFACTS
RUN echo ARCH="$ARCHTAG"

RUN echo 'Building kata-deploy container image for "${ARCHTAG}" architecture'
ARG VACCEL_RELEASE=latest
ARG VACCEL_ARTIFACTS_URL=https://github.com/cloudkernels/vaccel/releases/download/${VACCEL_RELEASE}/vaccel_${ARCHTAG}_Release.zip

ENV DEBIAN_FRONTEND="noninteractive"

RUN apt-get update && apt-get install -y wget unzip xz-utils

RUN mkdir /kata

# runs only for ARCH=x86_64
RUN if [ -z ${KATA_ARTIFACTS_URL+x} ]; then \
    echo 'Downloading default kata from "${KATA_ARTIFACTS_URL}"' && \
    wget ${KATA_ARTIFACTS_URL} && \
    mkdir /kata-defaults && \
    tar xvf ${KATA_ARTIFACTS}-x86_64.tar.xz -C /kata-defaults && \
    cp /kata-defaults/opt/kata/bin/firecracker /kata/opt/kata/bin/ && \
    cp /kata-defaults/opt/kata/share/kata-containers/kata-containers.img /kata/opt/kata/share/kata-containers/ && \
    cp /kata-defaults/opt/kata/share/kata-containers/vmlinux /kata/opt/kata/share/kata-containers/; \
    fi 

# gets kata-vaccel compatible artifacts
RUN if [ -z ${KATA_VACCEL_ARTIFACTS_URL+x} ]; then \
    wget ${KATA_VACCEL_ARTIFACTS_URL} \
    fi 

# for now find the components locally
# this will change when kata-vaccel CI/CD is ready
ADD ./kata-vaccel-${ARCHTAG}.tar.gz ./kata-vaccel-${ARCHTAG}.tar.gz

ARG KATA_VACCEL_ARTIFACTS=kata-vaccel-${ARCHTAG}.tar.gz

RUN tar xvf ${KATA_VACCEL_ARTIFACTS} -C /kata

RUN wget ${VACCEL_ARTIFACTS_URL} && \
    unzip vaccel_${ARCHTAG}_Release.zip -d /vaccel && \

FROM centos/systemd
ARG ARCHTAG
RUN echo ARCH="$ARCHTAG"
ARG KUBE_ARCH=amd64
ARG VACCEL_DESTINATION=/opt/kata-artifacts/opt/kata

# Install vAccel release artifacts to container image
COPY --from=artifacts /vaccel/bin/firecracker ${VACCEL_DESTINATION}/bin/firecracker-vaccel
COPY --from=artifacts /vaccel/bin/vaccelrt-agent ${VACCEL_DESTINATION}/bin/
#COPY --from=artifacts /vaccel/lib/libvaccel-jetson.so ${VACCEL_DESTINATION}/lib/
COPY --from=artifacts /vaccel/lib/libvaccel-noop.so ${VACCEL_DESTINATION}/lib/
COPY --from=artifacts /vaccel/lib/libvaccel.so ${VACCEL_DESTINATION}/lib/

COPY --from=artifacts /kata/opt/kata/* ${VACCEL_DESTINATION}

# Edit the configuration files for each runtime class handler (fc, fc-vaccel, fc-vaccel-virtio)
# fc: no vaccel
# fc-vaccel: vaccel vsock transport
# fc-vaccel-virtio: vaccel virtio transport

ARG FC_VIRTIO_ACCEL_CONFIG=${VACCEL_DESTINATION}/share/defaults/kata-containers/configuration-fc-vaccel-virtio.toml
ARG FC_VSOCK_ACCEL_CONFIG=${VACCEL_DESTINATION}/share/defaults/kata-containers/configuration-fc-vaccel.toml
ARG FC_DEFAULT_CONFIG=${VACCEL_DESTINATION}/share/defaults/kata-containers/configuration-fc.toml

COPY --from=artifacts /kata/opt/kata/share/configuration-fc.toml ${FC_VIRTIO_ACCEL_CONFIG}
COPY --from=artifacts /kata/opt/kata/share/configuration-fc.toml ${FC_VSOCK_ACCEL_CONFIG}

RUN \ 
sed -i -- 's~="vaccel"~=""~g' ${FC_DEFAULT_CONFIG} && \
sed -i -- 's~="vsock"~="virtio"~g' ${FC_VIRTIO_ACCEL_CONFIG} && \
sed -i -- 's~bin/firecracker~bin/firecracker-vaccel~g' ${FC_VIRTIO_ACCEL_CONFIG} && \
sed -i -- 's~vmlinux.container~vmlinux.container.virtio~g' ${FC_VIRTIO_ACCEL_CONFIG} && \
sed -i -- 's~kata-containers.img~kata-containers.img.virtio~g' ${FC_VIRTIO_ACCEL_CONFIG} \

# aarch64 uses the same kernel & rootfs both for vsock & virtio
# create a symlink to respect the configuration tomls

RUN if [ ${ARCH} == "aarch64 + x" ]; then \
	echo "aarch64 version: create symlinks for kernel and rootfs" && \
	cd ${VACCEL_DESTINATION}/share/kata-containers/ && \
	ln -s kata-containers.img kata-containers.img.virtio && \
	ln -s vmlinux.container vmlinux.container.virtio; \
    fi

RUN chown -R root:root ${VACCEL_DESTINATION}/

#Add kubectl binary
RUN \
curl -Lso /bin/kubectl https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/${KUBE_ARCH}/kubectl && \
chmod +x /bin/kubectl

#Add deploy scripts to container image
COPY scripts ${VACCEL_DESTINATION}/../../scripts

RUN \
ln -s ${VACCEL_DESTINATION}/../../scripts/kata-deploy.sh /usr/bin/kata-deploy

#make sure to inform deploy script that artifacts are installed (noy yet implemented)
RUN touch ${VACCEL_DESTINATION}/.downloaded
