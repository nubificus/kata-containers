// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Crypto crypto
// swagger:model Crypto
type Crypto struct {

	// crypto dev id
	// Required: true
	CryptoDevID *string `json:"crypto_dev_id"`

	// Path to the host crypto device
	// Required: true
	HostCryptoDev *string `json:"host_crypto_dev"`
}

// Validate validates this crypto
func (m *Crypto) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCryptoDevID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHostCryptoDev(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Crypto) validateCryptoDevID(formats strfmt.Registry) error {

	if err := validate.Required("crypto_dev_id", "body", m.CryptoDevID); err != nil {
		return err
	}

	return nil
}

func (m *Crypto) validateHostCryptoDev(formats strfmt.Registry) error {

	if err := validate.Required("host_crypto_dev", "body", m.HostCryptoDev); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Crypto) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Crypto) UnmarshalBinary(b []byte) error {
	var res Crypto
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
